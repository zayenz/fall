struct S<'a:'b>;
fn main() {
  "\"";
  '\'';
}

FILE
  STRUCT_DEF
    STRUCT "struct"
    IDENT "S"
    TYPE_PARAMETERS
      L_ANGLE "<"
      LIFETIME_PARAMETER
        LIFETIME "\'a"
        COLON ":"
        LIFETIME "\'b"
      R_ANGLE ">"
    SEMI ";"
  FN_DEF
    FN "fn"
    IDENT "main"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      EXPR_STMT
        LITERAL
          STRING "\"\\\"\""
        SEMI ";"
      EXPR_STMT
        LITERAL
          CHAR "\'\\\'\'"
        SEMI ";"
      R_CURLY "}"

----------------------------------------
use abi::{self, Abi};

FILE
  USE_DECL
    USE "use"
    PATH
      PATH_SEGMENT
        IDENT "abi"
    COLONCOLON "::"
    USE_SPEC
      L_CURLY "{"
      USE_SPEC_ENTRY
        SELF "self"
      COMMA ","
      USE_SPEC_ENTRY
        IDENT "Abi"
      R_CURLY "}"
    SEMI ";"

----------------------------------------
const unsafe fn foo(self, x: i32) -> () {
  ()
}

FILE
  FN_DEF
    CONST "const"
    UNSAFE "unsafe"
    FN "fn"
    IDENT "foo"
    L_PAREN "("
    SELF_PARAMETER
      SELF "self"
      COMMA ","
    VALUE_PARAM
      PATH_PATTERN
        PATH
          PATH_SEGMENT
            IDENT "x"
      COLON ":"
      TYPE_REFERENCE
        PATH_TYPE
          PATH
            PATH_SEGMENT
              IDENT "i32"
    R_PAREN ")"
    THIN_ARROW "->"
    TYPE_REFERENCE
      UNIT_TYPE
        L_PAREN "("
        R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      EXPR_STMT
        UNIT_EXPR
          L_PAREN "("
          R_PAREN ")"
      R_CURLY "}"

----------------------------------------
fn foo(&mut self: Box<Self>) {}
fn bar(mut self) {}

FILE
  FN_DEF
    FN "fn"
    IDENT "foo"
    L_PAREN "("
    SELF_PARAMETER
      AMPERSAND "&"
      MUT "mut"
      SELF "self"
      COLON ":"
      TYPE_REFERENCE
        PATH_TYPE
          PATH
            PATH_SEGMENT
              IDENT "Box"
              TYPE_ARGUMENTS
                L_ANGLE "<"
                TYPE_REFERENCE
                  PATH_TYPE
                    PATH
                      PATH_SEGMENT
                        IDENT "Self"
                R_ANGLE ">"
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      R_CURLY "}"
  FN_DEF
    FN "fn"
    IDENT "bar"
    L_PAREN "("
    SELF_PARAMETER
      MUT "mut"
      SELF "self"
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      R_CURLY "}"

----------------------------------------
impl Node {}
unsafe impl<'f> Debug for Node<'f> where Self: 'static { }

FILE
  IMPL_DEF
    IMPL "impl"
    TYPE_REFERENCE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            IDENT "Node"
    MEMBERS
      L_CURLY "{"
      R_CURLY "}"
  IMPL_DEF
    UNSAFE "unsafe"
    IMPL "impl"
    TYPE_PARAMETERS
      L_ANGLE "<"
      LIFETIME_PARAMETER
        LIFETIME "\'f"
      R_ANGLE ">"
    TYPE_REFERENCE
      PATH_TYPE
        PATH
          COLONCOLON "::"
          PATH_SEGMENT
            IDENT "Debug"
    FOR "for"
    TYPE_REFERENCE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            IDENT "Node"
            TYPE_ARGUMENTS
              L_ANGLE "<"
              LIFETIME "\'f"
              R_ANGLE ">"
    WHERE_CLAUSE
      WHERE "where"
      TYPE_REFERENCE
        PATH_TYPE
          PATH
            PATH_SEGMENT
              IDENT "Self"
      COLON ":"
      TYPE_BOUND
        LIFETIME "\'static"
    MEMBERS
      L_CURLY "{"
      R_CURLY "}"

----------------------------------------
pub trait T<X>: Clone
  where X: Clone
{}

FILE
  TRAIT_DEF
    VISIBILITY
      PUB "pub"
    TRAIT "trait"
    IDENT "T"
    TYPE_PARAMETERS
      L_ANGLE "<"
      TYPE_PARAMETER
        IDENT "X"
      R_ANGLE ">"
    COLON ":"
    TYPE_BOUND
      PATH_TYPE
        PATH
          PATH_SEGMENT
            IDENT "Clone"
    WHERE_CLAUSE
      WHERE "where"
      TYPE_REFERENCE
        PATH_TYPE
          PATH
            PATH_SEGMENT
              IDENT "X"
      COLON ":"
      TYPE_BOUND
        PATH_TYPE
          PATH
            PATH_SEGMENT
              IDENT "Clone"
    MEMBERS
      L_CURLY "{"
      R_CURLY "}"

----------------------------------------
pub const X: i32 = 0;

FILE
  CONST_DEF
    VISIBILITY
      PUB "pub"
    CONST "const"
    IDENT "X"
    COLON ":"
    TYPE_REFERENCE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            IDENT "i32"
    EQ "="
    LITERAL
      NUMBER "0"
    SEMI ";"

----------------------------------------
foo!{}
bar!();

FILE
  MACRO_ITEM
    BLOCK_MACRO
      IDENT "foo"
      BANG "!"
      L_CURLY "{"
      R_CURLY "}"
  MACRO_ITEM
    LINE_MACRO
      IDENT "bar"
      BANG "!"
      L_PAREN "("
      R_PAREN ")"
    SEMI ";"

----------------------------------------
extern {
  static errno: i32;
  #[link_name = "bar"]
  pub fn foo();
}

FILE
  EXTERN_BLOCK
    LINKAGE
      EXTERN "extern"
    L_CURLY "{"
    CONST_DEF
      STATIC "static"
      IDENT "errno"
      COLON ":"
      TYPE_REFERENCE
        PATH_TYPE
          PATH
            PATH_SEGMENT
              IDENT "i32"
      SEMI ";"
    FN_DEF
      ATTRIBUTE
        HASH "#"
        L_BRACK "["
        ATTR_VALUE
          IDENT "link_name"
          EQ "="
          LITERAL
            STRING "\"bar\""
        R_BRACK "]"
      VISIBILITY
        PUB "pub"
      FN "fn"
      IDENT "foo"
      L_PAREN "("
      R_PAREN ")"
      SEMI ";"
    R_CURLY "}"

----------------------------------------
struct B<'a:, 'b: 'a + 'a, C: 'b + Clone + for<'de> De<'de> +, D:>();

FILE
  STRUCT_DEF
    STRUCT "struct"
    IDENT "B"
    TYPE_PARAMETERS
      L_ANGLE "<"
      LIFETIME_PARAMETER
        LIFETIME "\'a"
        COLON ":"
      COMMA ","
      LIFETIME_PARAMETER
        LIFETIME "\'b"
        COLON ":"
        LIFETIME "\'a"
        PLUS "+"
        LIFETIME "\'a"
      COMMA ","
      TYPE_PARAMETER
        IDENT "C"
        COLON ":"
        TYPE_BOUND
          LIFETIME "\'b"
        PLUS "+"
        TYPE_BOUND
          PATH_TYPE
            PATH
              PATH_SEGMENT
                IDENT "Clone"
        PLUS "+"
        TYPE_BOUND
          FOR_TYPE
            FOR "for"
            TYPE_PARAMETERS
              L_ANGLE "<"
              LIFETIME_PARAMETER
                LIFETIME "\'de"
              R_ANGLE ">"
            TYPE_REFERENCE
              PATH_TYPE
                PATH
                  PATH_SEGMENT
                    IDENT "De"
                    TYPE_ARGUMENTS
                      L_ANGLE "<"
                      LIFETIME "\'de"
                      R_ANGLE ">"
        PLUS "+"
      COMMA ","
      TYPE_PARAMETER
        IDENT "D"
        COLON ":"
      R_ANGLE ">"
    L_PAREN "("
    R_PAREN ")"
    SEMI ";"

----------------------------------------
pub struct X;
pub(crate) struct Y;
pub(super) struct Z;

FILE
  STRUCT_DEF
    VISIBILITY
      PUB "pub"
    STRUCT "struct"
    IDENT "X"
    SEMI ";"
  STRUCT_DEF
    VISIBILITY
      PUB "pub"
      L_PAREN "("
      CRATE "crate"
      R_PAREN ")"
    STRUCT "struct"
    IDENT "Y"
    SEMI ";"
  STRUCT_DEF
    VISIBILITY
      PUB "pub"
      L_PAREN "("
      SUPER "super"
      R_PAREN ")"
    STRUCT "struct"
    IDENT "Z"
    SEMI ";"

----------------------------------------
fn f()
  where T: Clone + Copy, Foo: Bar
{}

FILE
  FN_DEF
    FN "fn"
    IDENT "f"
    L_PAREN "("
    R_PAREN ")"
    WHERE_CLAUSE
      WHERE "where"
      TYPE_REFERENCE
        PATH_TYPE
          PATH
            PATH_SEGMENT
              IDENT "T"
      COLON ":"
      TYPE_BOUND
        PATH_TYPE
          PATH
            PATH_SEGMENT
              IDENT "Clone"
      PLUS "+"
      TYPE_BOUND
        PATH_TYPE
          PATH
            PATH_SEGMENT
              IDENT "Copy"
      COMMA ","
      TYPE_REFERENCE
        PATH_TYPE
          PATH
            PATH_SEGMENT
              IDENT "Foo"
      COLON ":"
      TYPE_BOUND
        PATH_TYPE
          PATH
            PATH_SEGMENT
              IDENT "Bar"
    BLOCK_EXPR
      L_CURLY "{"
      R_CURLY "}"

----------------------------------------
const C: Foo<Bar> = foo::<'bar, Baz>;
const C: Fn(i32, i64) -> () = foo;

FILE
  CONST_DEF
    CONST "const"
    IDENT "C"
    COLON ":"
    TYPE_REFERENCE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            IDENT "Foo"
            TYPE_ARGUMENTS
              L_ANGLE "<"
              TYPE_REFERENCE
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      IDENT "Bar"
              R_ANGLE ">"
    EQ "="
    PATH_EXPR
      PATH
        PATH_SEGMENT
          IDENT "foo"
          TYPE_ARGUMENTS
            COLONCOLON "::"
            L_ANGLE "<"
            LIFETIME "\'bar"
            COMMA ","
            TYPE_REFERENCE
              PATH_TYPE
                PATH
                  PATH_SEGMENT
                    IDENT "Baz"
            R_ANGLE ">"
    SEMI ";"
  CONST_DEF
    CONST "const"
    IDENT "C"
    COLON ":"
    TYPE_REFERENCE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            IDENT "Fn"
            FN_TRAIT_SUGAR
              L_PAREN "("
              TYPE_REFERENCE
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      IDENT "i32"
              COMMA ","
              TYPE_REFERENCE
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      IDENT "i64"
              R_PAREN ")"
              THIN_ARROW "->"
              TYPE_REFERENCE
                UNIT_TYPE
                  L_PAREN "("
                  R_PAREN ")"
    EQ "="
    PATH_EXPR
      PATH
        PATH_SEGMENT
          IDENT "foo"
    SEMI ";"

----------------------------------------
type T = <Q as Foo<'f>>::Result;

FILE
  TYPE_DEF
    TYPE "type"
    IDENT "T"
    EQ "="
    TYPE_REFERENCE
      PATH_TYPE
        TRAIT_PROJECTION_PATH
          L_ANGLE "<"
          TYPE_REFERENCE
            PATH_TYPE
              PATH
                PATH_SEGMENT
                  IDENT "Q"
          AS "as"
          TYPE_REFERENCE
            PATH_TYPE
              PATH
                PATH_SEGMENT
                  IDENT "Foo"
                  TYPE_ARGUMENTS
                    L_ANGLE "<"
                    LIFETIME "\'f"
                    R_ANGLE ">"
          R_ANGLE ">"
          COLONCOLON "::"
          PATH_SEGMENT
            IDENT "Result"
    SEMI ";"

----------------------------------------
type T = Box<Iterator<Item=T + 'static> + Send>;

FILE
  TYPE_DEF
    TYPE "type"
    IDENT "T"
    EQ "="
    TYPE_REFERENCE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            IDENT "Box"
            TYPE_ARGUMENTS
              L_ANGLE "<"
              TYPE_REFERENCE
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      IDENT "Iterator"
                      TYPE_ARGUMENTS
                        L_ANGLE "<"
                        IDENT "Item"
                        EQ "="
                        TYPE_REFERENCE
                          PATH_TYPE
                            PATH
                              PATH_SEGMENT
                                IDENT "T"
                          PLUS "+"
                          TYPE_BOUND
                            LIFETIME "\'static"
                        R_ANGLE ">"
                PLUS "+"
                TYPE_BOUND
                  PATH_TYPE
                    PATH
                      PATH_SEGMENT
                        IDENT "Send"
              R_ANGLE ">"
    SEMI ";"

----------------------------------------
type T = X<'a, Foo, Bar=Baz>;

FILE
  TYPE_DEF
    TYPE "type"
    IDENT "T"
    EQ "="
    TYPE_REFERENCE
      PATH_TYPE
        PATH
          PATH_SEGMENT
            IDENT "X"
            TYPE_ARGUMENTS
              L_ANGLE "<"
              LIFETIME "\'a"
              COMMA ","
              TYPE_REFERENCE
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      IDENT "Foo"
              COMMA ","
              IDENT "Bar"
              EQ "="
              TYPE_REFERENCE
                PATH_TYPE
                  PATH
                    PATH_SEGMENT
                      IDENT "Baz"
              R_ANGLE ">"
    SEMI ";"

----------------------------------------
type T = &'static mut X;

FILE
  TYPE_DEF
    TYPE "type"
    IDENT "T"
    EQ "="
    TYPE_REFERENCE
      REFERENCE_TYPE
        AMPERSAND "&"
        LIFETIME "\'static"
        MUT "mut"
        TYPE_REFERENCE
          PATH_TYPE
            PATH
              PATH_SEGMENT
                IDENT "X"
    SEMI ";"

----------------------------------------
type T = *mut ();

FILE
  TYPE_DEF
    TYPE "type"
    IDENT "T"
    EQ "="
    TYPE_REFERENCE
      POINTER_TYPE
        STAR "*"
        MUT "mut"
        TYPE_REFERENCE
          UNIT_TYPE
            L_PAREN "("
            R_PAREN ")"
    SEMI ";"

----------------------------------------
type T = _;

FILE
  TYPE_DEF
    TYPE "type"
    IDENT "T"
    EQ "="
    TYPE_REFERENCE
      PLACEHOLDER_TYPE
        UNDERSCORE "_"
    SEMI ";"

----------------------------------------
type T = ();
type T = (A);
type T = (A,);
type T = (A, B);

FILE
  TYPE_DEF
    TYPE "type"
    IDENT "T"
    EQ "="
    TYPE_REFERENCE
      UNIT_TYPE
        L_PAREN "("
        R_PAREN ")"
    SEMI ";"
  TYPE_DEF
    TYPE "type"
    IDENT "T"
    EQ "="
    TYPE_REFERENCE
      PAREN_TYPE
        L_PAREN "("
        TYPE_REFERENCE
          PATH_TYPE
            PATH
              PATH_SEGMENT
                IDENT "A"
        R_PAREN ")"
    SEMI ";"
  TYPE_DEF
    TYPE "type"
    IDENT "T"
    EQ "="
    TYPE_REFERENCE
      TUPLE_TYPE
        L_PAREN "("
        TYPE_REFERENCE
          PATH_TYPE
            PATH
              PATH_SEGMENT
                IDENT "A"
        COMMA ","
        R_PAREN ")"
    SEMI ";"
  TYPE_DEF
    TYPE "type"
    IDENT "T"
    EQ "="
    TYPE_REFERENCE
      TUPLE_TYPE
        L_PAREN "("
        TYPE_REFERENCE
          PATH_TYPE
            PATH
              PATH_SEGMENT
                IDENT "A"
        COMMA ","
        TYPE_REFERENCE
          PATH_TYPE
            PATH
              PATH_SEGMENT
                IDENT "B"
        R_PAREN ")"
    SEMI ";"

----------------------------------------
fn main() -> ! { }

FILE
  FN_DEF
    FN "fn"
    IDENT "main"
    L_PAREN "("
    R_PAREN ")"
    THIN_ARROW "->"
    TYPE_REFERENCE
      NEVER_TYPE
        BANG "!"
    BLOCK_EXPR
      L_CURLY "{"
      R_CURLY "}"

----------------------------------------
type T = [(); 92];
type T = &[()];

FILE
  TYPE_DEF
    TYPE "type"
    IDENT "T"
    EQ "="
    TYPE_REFERENCE
      ARRAY_TYPE
        L_BRACK "["
        TYPE_REFERENCE
          UNIT_TYPE
            L_PAREN "("
            R_PAREN ")"
        SEMI ";"
        LITERAL
          NUMBER "92"
        R_BRACK "]"
    SEMI ";"
  TYPE_DEF
    TYPE "type"
    IDENT "T"
    EQ "="
    TYPE_REFERENCE
      REFERENCE_TYPE
        AMPERSAND "&"
        TYPE_REFERENCE
          ARRAY_TYPE
            L_BRACK "["
            TYPE_REFERENCE
              UNIT_TYPE
                L_PAREN "("
                R_PAREN ")"
            R_BRACK "]"
    SEMI ";"

----------------------------------------
type F = extern "C" fn(i32, x: f64) -> ();
type F_Unit = fn();

FILE
  TYPE_DEF
    TYPE "type"
    IDENT "F"
    EQ "="
    TYPE_REFERENCE
      FN_POINTER_TYPE
        LINKAGE
          EXTERN "extern"
          STRING "\"C\""
        FN "fn"
        L_PAREN "("
        VALUE_PARAM
          TYPE_REFERENCE
            PATH_TYPE
              PATH
                PATH_SEGMENT
                  IDENT "i32"
        COMMA ","
        VALUE_PARAM
          PATH_PATTERN
            PATH
              PATH_SEGMENT
                IDENT "x"
          COLON ":"
          TYPE_REFERENCE
            PATH_TYPE
              PATH
                PATH_SEGMENT
                  IDENT "f64"
        R_PAREN ")"
        THIN_ARROW "->"
        TYPE_REFERENCE
          UNIT_TYPE
            L_PAREN "("
            R_PAREN ")"
    SEMI ";"
  TYPE_DEF
    TYPE "type"
    IDENT "F_Unit"
    EQ "="
    TYPE_REFERENCE
      FN_POINTER_TYPE
        FN "fn"
        L_PAREN "("
        R_PAREN ")"
    SEMI ";"

----------------------------------------
type F = for<'f> T<'f>;

FILE
  TYPE_DEF
    TYPE "type"
    IDENT "F"
    EQ "="
    TYPE_REFERENCE
      FOR_TYPE
        FOR "for"
        TYPE_PARAMETERS
          L_ANGLE "<"
          LIFETIME_PARAMETER
            LIFETIME "\'f"
          R_ANGLE ">"
        TYPE_REFERENCE
          PATH_TYPE
            PATH
              PATH_SEGMENT
                IDENT "T"
                TYPE_ARGUMENTS
                  L_ANGLE "<"
                  LIFETIME "\'f"
                  R_ANGLE ">"
    SEMI ";"

----------------------------------------
fn main() { let _ = (); }

FILE
  FN_DEF
    FN "fn"
    IDENT "main"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      LET_STMT
        LET "let"
        WILDCARD_PATTERN
          UNDERSCORE "_"
        EQ "="
        UNIT_EXPR
          L_PAREN "("
          R_PAREN ")"
        SEMI ";"
      R_CURLY "}"

----------------------------------------
fn main() {
  let foo::bar = ();
  let S(foo, bar, .. ,) = ();
  let foo::Bar { ref x, y: _, .. } = ();
}

FILE
  FN_DEF
    FN "fn"
    IDENT "main"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      LET_STMT
        LET "let"
        PATH_PATTERN
          PATH
            PATH
              PATH_SEGMENT
                IDENT "foo"
            COLONCOLON "::"
            PATH_SEGMENT
              IDENT "bar"
        EQ "="
        UNIT_EXPR
          L_PAREN "("
          R_PAREN ")"
        SEMI ";"
      LET_STMT
        LET "let"
        TUPE_STRUCT_PATTERN
          PATH
            PATH_SEGMENT
              IDENT "S"
          L_PAREN "("
          PATH_PATTERN
            PATH
              PATH_SEGMENT
                IDENT "foo"
          COMMA ","
          PATH_PATTERN
            PATH
              PATH_SEGMENT
                IDENT "bar"
          COMMA ","
          DOTDOT ".."
          COMMA ","
          R_PAREN ")"
        EQ "="
        UNIT_EXPR
          L_PAREN "("
          R_PAREN ")"
        SEMI ";"
      LET_STMT
        LET "let"
        STRUCT_PATTERN
          PATH
            PATH
              PATH_SEGMENT
                IDENT "foo"
            COLONCOLON "::"
            PATH_SEGMENT
              IDENT "Bar"
          L_CURLY "{"
          STRUCT_PATTERN_FIELD
            BINDING_PATTERN
              REF "ref"
              IDENT "x"
          COMMA ","
          STRUCT_PATTERN_FIELD
            IDENT "y"
            COLON ":"
            WILDCARD_PATTERN
              UNDERSCORE "_"
          COMMA ","
          DOTDOT ".."
          R_CURLY "}"
        EQ "="
        UNIT_EXPR
          L_PAREN "("
          R_PAREN ")"
        SEMI ";"
      R_CURLY "}"

----------------------------------------
fn main() {
    let foo = ();
    let ref mut bar = 92;
}

FILE
  FN_DEF
    FN "fn"
    IDENT "main"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      LET_STMT
        LET "let"
        PATH_PATTERN
          PATH
            PATH_SEGMENT
              IDENT "foo"
        EQ "="
        UNIT_EXPR
          L_PAREN "("
          R_PAREN ")"
        SEMI ";"
      LET_STMT
        LET "let"
        BINDING_PATTERN
          REF "ref"
          MUT "mut"
          IDENT "bar"
        EQ "="
        LITERAL
          NUMBER "92"
        SEMI ";"
      R_CURLY "}"

----------------------------------------
fn main() {
  let (x) = ();
  let (x,) = ();
  let (x, y) = ();
  let () = ();
}

FILE
  FN_DEF
    FN "fn"
    IDENT "main"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      LET_STMT
        LET "let"
        PAREN_PATTERN
          L_PAREN "("
          PATH_PATTERN
            PATH
              PATH_SEGMENT
                IDENT "x"
          R_PAREN ")"
        EQ "="
        UNIT_EXPR
          L_PAREN "("
          R_PAREN ")"
        SEMI ";"
      LET_STMT
        LET "let"
        TUPLE_PATTERN
          L_PAREN "("
          PATH_PATTERN
            PATH
              PATH_SEGMENT
                IDENT "x"
          COMMA ","
          R_PAREN ")"
        EQ "="
        UNIT_EXPR
          L_PAREN "("
          R_PAREN ")"
        SEMI ";"
      LET_STMT
        LET "let"
        TUPLE_PATTERN
          L_PAREN "("
          PATH_PATTERN
            PATH
              PATH_SEGMENT
                IDENT "x"
          COMMA ","
          PATH_PATTERN
            PATH
              PATH_SEGMENT
                IDENT "y"
          R_PAREN ")"
        EQ "="
        UNIT_EXPR
          L_PAREN "("
          R_PAREN ")"
        SEMI ";"
      LET_STMT
        LET "let"
        UNIT_PATTERN
          L_PAREN "("
          R_PAREN ")"
        EQ "="
        UNIT_EXPR
          L_PAREN "("
          R_PAREN ")"
        SEMI ";"
      R_CURLY "}"

----------------------------------------
fn main() { let &mut foo = bar; }

FILE
  FN_DEF
    FN "fn"
    IDENT "main"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      LET_STMT
        LET "let"
        REFERENCE_PATTERN
          AMPERSAND "&"
          MUT "mut"
          PATH_PATTERN
            PATH
              PATH_SEGMENT
                IDENT "foo"
        EQ "="
        PATH_EXPR
          PATH
            PATH_SEGMENT
              IDENT "bar"
        SEMI ";"
      R_CURLY "}"

----------------------------------------
fn main() {
  (1, "", r"", ' ', 'hell', '', true, false)
}

FILE
  FN_DEF
    FN "fn"
    IDENT "main"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      EXPR_STMT
        TUPLE_EXPR
          L_PAREN "("
          LITERAL
            NUMBER "1"
          COMMA ","
          LITERAL
            STRING "\"\""
          COMMA ","
          LITERAL
            RAW_STRING "r\"\""
          COMMA ","
          LITERAL
            CHAR "\' \'"
          COMMA ","
          LITERAL
            CHAR "\'hell\'"
          COMMA ","
          LITERAL
            CHAR "\'\'"
          COMMA ","
          LITERAL
            BOOL "true"
          COMMA ","
          LITERAL
            BOOL "false"
          R_PAREN ")"
      R_CURLY "}"

----------------------------------------
fn main() {
    S { foo, bar: baz, ..Default::default() };
}

FILE
  FN_DEF
    FN "fn"
    IDENT "main"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      EXPR_STMT
        STRUCT_LITERAL
          PATH
            PATH_SEGMENT
              IDENT "S"
          L_CURLY "{"
          STRUCT_LITERAL_FIELD
            IDENT "foo"
          COMMA ","
          STRUCT_LITERAL_FIELD
            IDENT "bar"
            COLON ":"
            PATH_EXPR
              PATH
                PATH_SEGMENT
                  IDENT "baz"
          COMMA ","
          DOTDOT ".."
          CALL_EXPR
            PATH_EXPR
              PATH
                PATH
                  PATH_SEGMENT
                    IDENT "Default"
                COLONCOLON "::"
                PATH_SEGMENT
                  IDENT "default"
            L_PAREN "("
            R_PAREN ")"
          R_CURLY "}"
        SEMI ";"
      R_CURLY "}"

----------------------------------------
fn main() {
  ();
  (1);
  ((1));
  (1,);
  (1, 2);
}

FILE
  FN_DEF
    FN "fn"
    IDENT "main"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      EXPR_STMT
        UNIT_EXPR
          L_PAREN "("
          R_PAREN ")"
        SEMI ";"
      EXPR_STMT
        PAREN_EXPR
          L_PAREN "("
          LITERAL
            NUMBER "1"
          R_PAREN ")"
        SEMI ";"
      EXPR_STMT
        PAREN_EXPR
          L_PAREN "("
          PAREN_EXPR
            L_PAREN "("
            LITERAL
              NUMBER "1"
            R_PAREN ")"
          R_PAREN ")"
        SEMI ";"
      EXPR_STMT
        TUPLE_EXPR
          L_PAREN "("
          LITERAL
            NUMBER "1"
          COMMA ","
          R_PAREN ")"
        SEMI ";"
      EXPR_STMT
        TUPLE_EXPR
          L_PAREN "("
          LITERAL
            NUMBER "1"
          COMMA ","
          LITERAL
            NUMBER "2"
          R_PAREN ")"
        SEMI ";"
      R_CURLY "}"

----------------------------------------
fn main() {
  [];
  [1];
  [2,];
  [2, 3];
  [1; 2];
}

FILE
  FN_DEF
    FN "fn"
    IDENT "main"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      EXPR_STMT
        ARRAY_LITERAL
          L_BRACK "["
          R_BRACK "]"
        SEMI ";"
      EXPR_STMT
        ARRAY_LITERAL
          L_BRACK "["
          LITERAL
            NUMBER "1"
          R_BRACK "]"
        SEMI ";"
      EXPR_STMT
        ARRAY_LITERAL
          L_BRACK "["
          LITERAL
            NUMBER "2"
          COMMA ","
          R_BRACK "]"
        SEMI ";"
      EXPR_STMT
        ARRAY_LITERAL
          L_BRACK "["
          LITERAL
            NUMBER "2"
          COMMA ","
          LITERAL
            NUMBER "3"
          R_BRACK "]"
        SEMI ";"
      EXPR_STMT
        ARRAY_LITERAL
          L_BRACK "["
          LITERAL
            NUMBER "1"
          SEMI ";"
          LITERAL
            NUMBER "2"
          R_BRACK "]"
        SEMI ";"
      R_CURLY "}"

----------------------------------------
fn foo() {
    |x, y: i32,| 1 + 1;
    move || -> i32 { 92 };
}

FILE
  FN_DEF
    FN "fn"
    IDENT "foo"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      EXPR_STMT
        LAMBDA_EXPR
          PIPE "|"
          LAMBDA_VALUE_PARAM
            PATH_PATTERN
              PATH
                PATH_SEGMENT
                  IDENT "x"
          COMMA ","
          LAMBDA_VALUE_PARAM
            PATH_PATTERN
              PATH
                PATH_SEGMENT
                  IDENT "y"
            COLON ":"
            TYPE_REFERENCE
              PATH_TYPE
                PATH
                  PATH_SEGMENT
                    IDENT "i32"
          COMMA ","
          PIPE "|"
          SUM_EXPR
            LITERAL
              NUMBER "1"
            PLUS "+"
            LITERAL
              NUMBER "1"
        SEMI ";"
      EXPR_STMT
        LAMBDA_EXPR
          MOVE "move"
          PIPE "|"
          PIPE "|"
          THIN_ARROW "->"
          TYPE_REFERENCE
            PATH_TYPE
              PATH
                PATH_SEGMENT
                  IDENT "i32"
          BLOCK_EXPR
            L_CURLY "{"
            EXPR_STMT
              LITERAL
                NUMBER "92"
            R_CURLY "}"
        SEMI ";"
      R_CURLY "}"

----------------------------------------
fn binary_or_lambda_ambiguity() {
    || true || false;
}

FILE
  FN_DEF
    FN "fn"
    IDENT "binary_or_lambda_ambiguity"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      EXPR_STMT
        LAMBDA_EXPR
          PIPE "|"
          PIPE "|"
          LOGICAL_OR
            LITERAL
              BOOL "true"
            OR "||"
            LITERAL
              BOOL "false"
        SEMI ";"
      R_CURLY "}"

----------------------------------------
fn main() { return; return (); }

FILE
  FN_DEF
    FN "fn"
    IDENT "main"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      EXPR_STMT
        RETURN_EXPR
          RETURN "return"
        SEMI ";"
      EXPR_STMT
        RETURN_EXPR
          RETURN "return"
          UNIT_EXPR
            L_PAREN "("
            R_PAREN ")"
        SEMI ";"
      R_CURLY "}"

----------------------------------------
fn main() {
  'l: loop {
    break;
    continue 'l;
  }
}

FILE
  FN_DEF
    FN "fn"
    IDENT "main"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      EXPR_STMT
        LOOP_EXPR
          LIFETIME "\'l"
          COLON ":"
          LOOP "loop"
          BLOCK_EXPR
            L_CURLY "{"
            EXPR_STMT
              LOOP_CF_EXPR
                BREAK "break"
              SEMI ";"
            EXPR_STMT
              LOOP_CF_EXPR
                CONTINUE "continue"
                LIFETIME "\'l"
              SEMI ";"
            R_CURLY "}"
      R_CURLY "}"

----------------------------------------
fn main() {
    {1};
    {1}
    {1;}
    unsafe { let _ = (); }
}

FILE
  FN_DEF
    FN "fn"
    IDENT "main"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      EXPR_STMT
        BLOCK_EXPR
          L_CURLY "{"
          EXPR_STMT
            LITERAL
              NUMBER "1"
          R_CURLY "}"
      EMPTY_STMT
        SEMI ";"
      EXPR_STMT
        BLOCK_EXPR
          L_CURLY "{"
          EXPR_STMT
            LITERAL
              NUMBER "1"
          R_CURLY "}"
      EXPR_STMT
        BLOCK_EXPR
          L_CURLY "{"
          EXPR_STMT
            LITERAL
              NUMBER "1"
            SEMI ";"
          R_CURLY "}"
      EXPR_STMT
        BLOCK_EXPR
          UNSAFE "unsafe"
          L_CURLY "{"
          LET_STMT
            LET "let"
            WILDCARD_PATTERN
              UNDERSCORE "_"
            EQ "="
            UNIT_EXPR
              L_PAREN "("
              R_PAREN ")"
            SEMI ";"
          R_CURLY "}"
      R_CURLY "}"

----------------------------------------
fn main() {
  let d;
  let b: bool = true;
}

FILE
  FN_DEF
    FN "fn"
    IDENT "main"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      LET_STMT
        LET "let"
        PATH_PATTERN
          PATH
            PATH_SEGMENT
              IDENT "d"
        SEMI ";"
      LET_STMT
        LET "let"
        PATH_PATTERN
          PATH
            PATH_SEGMENT
              IDENT "b"
        TYPE_ASCRIPTION
          COLON ":"
          TYPE_REFERENCE
            PATH_TYPE
              PATH
                PATH_SEGMENT
                  IDENT "bool"
        EQ "="
        LITERAL
          BOOL "true"
        SEMI ";"
      R_CURLY "}"

----------------------------------------
fn main() {
  if true { foo } else { bar }
  if 1 { 2 } else if 3 { 4 } else { 5 }
}

FILE
  FN_DEF
    FN "fn"
    IDENT "main"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      EXPR_STMT
        IF_EXPR
          IF "if"
          LITERAL
            BOOL "true"
          BLOCK_EXPR
            L_CURLY "{"
            EXPR_STMT
              PATH_EXPR
                PATH
                  PATH_SEGMENT
                    IDENT "foo"
            R_CURLY "}"
          ELSE "else"
          BLOCK_EXPR
            L_CURLY "{"
            EXPR_STMT
              PATH_EXPR
                PATH
                  PATH_SEGMENT
                    IDENT "bar"
            R_CURLY "}"
      EXPR_STMT
        IF_EXPR
          IF "if"
          LITERAL
            NUMBER "1"
          BLOCK_EXPR
            L_CURLY "{"
            EXPR_STMT
              LITERAL
                NUMBER "2"
            R_CURLY "}"
          ELSE "else"
          IF_EXPR
            IF "if"
            LITERAL
              NUMBER "3"
            BLOCK_EXPR
              L_CURLY "{"
              EXPR_STMT
                LITERAL
                  NUMBER "4"
              R_CURLY "}"
            ELSE "else"
            BLOCK_EXPR
              L_CURLY "{"
              EXPR_STMT
                LITERAL
                  NUMBER "5"
              R_CURLY "}"
      R_CURLY "}"

----------------------------------------
fn main() { 'w: while true {} }

FILE
  FN_DEF
    FN "fn"
    IDENT "main"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      EXPR_STMT
        WHILE_EXPR
          LIFETIME "\'w"
          COLON ":"
          WHILE "while"
          LITERAL
            BOOL "true"
          BLOCK_EXPR
            L_CURLY "{"
            R_CURLY "}"
      R_CURLY "}"

----------------------------------------
fn main() {
  if let
}

FILE
  FN_DEF
    FN "fn"
    IDENT "main"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      EXPR_STMT
        IF_EXPR
          IF "if"
          LET "let"
          ERROR ""
          ERROR ""
          ERROR ""
      R_CURLY "}"

----------------------------------------
fn main() {
    if S {};
    if (S {}) {}
    if let Some(x) = foo() {}
}

FILE
  FN_DEF
    FN "fn"
    IDENT "main"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      EXPR_STMT
        IF_EXPR
          IF "if"
          PATH_EXPR
            PATH
              PATH_SEGMENT
                IDENT "S"
          BLOCK_EXPR
            L_CURLY "{"
            R_CURLY "}"
      EMPTY_STMT
        SEMI ";"
      EXPR_STMT
        IF_EXPR
          IF "if"
          PAREN_EXPR
            L_PAREN "("
            STRUCT_LITERAL
              PATH
                PATH_SEGMENT
                  IDENT "S"
              L_CURLY "{"
              R_CURLY "}"
            R_PAREN ")"
          BLOCK_EXPR
            L_CURLY "{"
            R_CURLY "}"
      EXPR_STMT
        IF_EXPR
          IF "if"
          LET "let"
          TUPE_STRUCT_PATTERN
            PATH
              PATH_SEGMENT
                IDENT "Some"
            L_PAREN "("
            PATH_PATTERN
              PATH
                PATH_SEGMENT
                  IDENT "x"
            R_PAREN ")"
          EQ "="
          CALL_EXPR
            PATH_EXPR
              PATH
                PATH_SEGMENT
                  IDENT "foo"
            L_PAREN "("
            R_PAREN ")"
          BLOCK_EXPR
            L_CURLY "{"
            R_CURLY "}"
      R_CURLY "}"

----------------------------------------
fn main() { 'pool: loop { 92 }}

FILE
  FN_DEF
    FN "fn"
    IDENT "main"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      EXPR_STMT
        LOOP_EXPR
          LIFETIME "\'pool"
          COLON ":"
          LOOP "loop"
          BLOCK_EXPR
            L_CURLY "{"
            EXPR_STMT
              LITERAL
                NUMBER "92"
            R_CURLY "}"
      R_CURLY "}"

----------------------------------------
fn main() { for x in xs {} }

FILE
  FN_DEF
    FN "fn"
    IDENT "main"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      EXPR_STMT
        FOR_EXPR
          FOR "for"
          PATH_PATTERN
            PATH
              PATH_SEGMENT
                IDENT "x"
          IN "in"
          PATH_EXPR
            PATH
              PATH_SEGMENT
                IDENT "xs"
          BLOCK_EXPR
            L_CURLY "{"
            R_CURLY "}"
      R_CURLY "}"

----------------------------------------
fn main() {
    match x {
      Some(1) | Some(2) => { no_comma }
      Some(x) if x & 3 => true,
      None => false,
    }
}

FILE
  FN_DEF
    FN "fn"
    IDENT "main"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      EXPR_STMT
        MATCH_EXPR
          MATCH "match"
          PATH_EXPR
            PATH
              PATH_SEGMENT
                IDENT "x"
          L_CURLY "{"
          MATCH_ARM
            TUPE_STRUCT_PATTERN
              PATH
                PATH_SEGMENT
                  IDENT "Some"
              L_PAREN "("
              LITERAL_PATTERN
                LITERAL
                  NUMBER "1"
              R_PAREN ")"
            PIPE "|"
            TUPE_STRUCT_PATTERN
              PATH
                PATH_SEGMENT
                  IDENT "Some"
              L_PAREN "("
              LITERAL_PATTERN
                LITERAL
                  NUMBER "2"
              R_PAREN ")"
            FAT_ARROW "=>"
            BLOCK_EXPR
              L_CURLY "{"
              EXPR_STMT
                PATH_EXPR
                  PATH
                    PATH_SEGMENT
                      IDENT "no_comma"
              R_CURLY "}"
          MATCH_ARM
            TUPE_STRUCT_PATTERN
              PATH
                PATH_SEGMENT
                  IDENT "Some"
              L_PAREN "("
              PATH_PATTERN
                PATH
                  PATH_SEGMENT
                    IDENT "x"
              R_PAREN ")"
            GUARD
              IF "if"
              BIT_AND
                PATH_EXPR
                  PATH
                    PATH_SEGMENT
                      IDENT "x"
                AMPERSAND "&"
                LITERAL
                  NUMBER "3"
            FAT_ARROW "=>"
            LITERAL
              BOOL "true"
            COMMA ","
          MATCH_ARM
            PATH_PATTERN
              PATH
                PATH_SEGMENT
                  IDENT "None"
            FAT_ARROW "=>"
            LITERAL
              BOOL "false"
            COMMA ","
          R_CURLY "}"
      R_CURLY "}"

----------------------------------------
fn main() {
    block! {
      foo => bar
    }
    println!("Hello, world");
    vec![]
}

FILE
  FN_DEF
    FN "fn"
    IDENT "main"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      MACRO_ITEM
        BLOCK_MACRO
          IDENT "block"
          BANG "!"
          L_CURLY "{"
          TT
            IDENT "foo"
          TT
            FAT_ARROW "=>"
          TT
            IDENT "bar"
          R_CURLY "}"
      MACRO_ITEM
        LINE_MACRO
          IDENT "println"
          BANG "!"
          L_PAREN "("
          TT
            STRING "\"Hello, world\""
          R_PAREN ")"
        SEMI ";"
      EXPR_STMT
        LINE_MACRO_EXPR
          LINE_MACRO
            IDENT "vec"
            BANG "!"
            L_BRACK "["
            R_BRACK "]"
      R_CURLY "}"

----------------------------------------
fn main() { foo.bar::<i32>() }

FILE
  FN_DEF
    FN "fn"
    IDENT "main"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      EXPR_STMT
        METHOD_CALL_EXPR
          PATH_EXPR
            PATH
              PATH_SEGMENT
                IDENT "foo"
          DOT "."
          IDENT "bar"
          TYPE_ARGUMENTS
            COLONCOLON "::"
            L_ANGLE "<"
            TYPE_REFERENCE
              PATH_TYPE
                PATH
                  PATH_SEGMENT
                    IDENT "i32"
            R_ANGLE ">"
          L_PAREN "("
          R_PAREN ")"
      R_CURLY "}"

----------------------------------------
fn main() {
  foo();
  let x = foo();
  {}();
  match x { 1 => {}() => 2 }
}

FILE
  FN_DEF
    FN "fn"
    IDENT "main"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      EXPR_STMT
        CALL_EXPR
          PATH_EXPR
            PATH
              PATH_SEGMENT
                IDENT "foo"
          L_PAREN "("
          R_PAREN ")"
        SEMI ";"
      LET_STMT
        LET "let"
        PATH_PATTERN
          PATH
            PATH_SEGMENT
              IDENT "x"
        EQ "="
        CALL_EXPR
          PATH_EXPR
            PATH
              PATH_SEGMENT
                IDENT "foo"
          L_PAREN "("
          R_PAREN ")"
        SEMI ";"
      EXPR_STMT
        BLOCK_EXPR
          L_CURLY "{"
          R_CURLY "}"
      EXPR_STMT
        UNIT_EXPR
          L_PAREN "("
          R_PAREN ")"
        SEMI ";"
      EXPR_STMT
        MATCH_EXPR
          MATCH "match"
          PATH_EXPR
            PATH
              PATH_SEGMENT
                IDENT "x"
          L_CURLY "{"
          MATCH_ARM
            LITERAL_PATTERN
              LITERAL
                NUMBER "1"
            FAT_ARROW "=>"
            BLOCK_EXPR
              L_CURLY "{"
              R_CURLY "}"
          MATCH_ARM
            UNIT_PATTERN
              L_PAREN "("
              R_PAREN ")"
            FAT_ARROW "=>"
            LITERAL
              NUMBER "2"
          R_CURLY "}"
      R_CURLY "}"

----------------------------------------
fn main() { foo() }

FILE
  FN_DEF
    FN "fn"
    IDENT "main"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      EXPR_STMT
        CALL_EXPR
          PATH_EXPR
            PATH
              PATH_SEGMENT
                IDENT "foo"
          L_PAREN "("
          R_PAREN ")"
      R_CURLY "}"

----------------------------------------
fn main() { x.foo; x.92; }

FILE
  FN_DEF
    FN "fn"
    IDENT "main"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      EXPR_STMT
        FIELD_EXPR
          PATH_EXPR
            PATH
              PATH_SEGMENT
                IDENT "x"
          DOT "."
          IDENT "foo"
        SEMI ";"
      EXPR_STMT
        FIELD_EXPR
          PATH_EXPR
            PATH
              PATH_SEGMENT
                IDENT "x"
          DOT "."
          NUMBER "92"
        SEMI ";"
      R_CURLY "}"

----------------------------------------
fn main() { xs[92]; }

FILE
  FN_DEF
    FN "fn"
    IDENT "main"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      EXPR_STMT
        INDEX_EXPR
          PATH_EXPR
            PATH
              PATH_SEGMENT
                IDENT "xs"
          L_BRACK "["
          LITERAL
            NUMBER "92"
          R_BRACK "]"
        SEMI ";"
      R_CURLY "}"

----------------------------------------
fn main() { -x??; }

FILE
  FN_DEF
    FN "fn"
    IDENT "main"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      EXPR_STMT
        NEGATION_EXPR
          MINUS "-"
          TRY_EXPR
            TRY_EXPR
              PATH_EXPR
                PATH
                  PATH_SEGMENT
                    IDENT "x"
              QUESTION "?"
            QUESTION "?"
        SEMI ";"
      R_CURLY "}"

----------------------------------------
fn main() { 1 as u128; }

FILE
  FN_DEF
    FN "fn"
    IDENT "main"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      EXPR_STMT
        CAST_EXPR
          LITERAL
            NUMBER "1"
          AS "as"
          TYPE_REFERENCE
            PATH_TYPE
              PATH
                PATH_SEGMENT
                  IDENT "u128"
        SEMI ";"
      R_CURLY "}"

----------------------------------------
fn main() {
    1     .. 2 + 3;
    1 + 2 .. 3;
          .. 1 + 2;
    1 + 2 .. ;
    for j in 1 .. { }
    x[1..];
}

FILE
  FN_DEF
    FN "fn"
    IDENT "main"
    L_PAREN "("
    R_PAREN ")"
    BLOCK_EXPR
      L_CURLY "{"
      EXPR_STMT
        RANGE_EXPR
          LITERAL
            NUMBER "1"
          DOTDOT ".."
          SUM_EXPR
            LITERAL
              NUMBER "2"
            PLUS "+"
            LITERAL
              NUMBER "3"
        SEMI ";"
      EXPR_STMT
        RANGE_EXPR
          SUM_EXPR
            LITERAL
              NUMBER "1"
            PLUS "+"
            LITERAL
              NUMBER "2"
          DOTDOT ".."
          LITERAL
            NUMBER "3"
        SEMI ";"
      EXPR_STMT
        RANGE_EXPR
          DOTDOT ".."
          SUM_EXPR
            LITERAL
              NUMBER "1"
            PLUS "+"
            LITERAL
              NUMBER "2"
        SEMI ";"
      EXPR_STMT
        RANGE_EXPR
          SUM_EXPR
            LITERAL
              NUMBER "1"
            PLUS "+"
            LITERAL
              NUMBER "2"
          DOTDOT ".."
        SEMI ";"
      EXPR_STMT
        FOR_EXPR
          FOR "for"
          PATH_PATTERN
            PATH
              PATH_SEGMENT
                IDENT "j"
          IN "in"
          RANGE_EXPR
            LITERAL
              NUMBER "1"
            DOTDOT ".."
          BLOCK_EXPR
            L_CURLY "{"
            R_CURLY "}"
      EXPR_STMT
        INDEX_EXPR
          PATH_EXPR
            PATH
              PATH_SEGMENT
                IDENT "x"
          L_BRACK "["
          RANGE_EXPR
            LITERAL
              NUMBER "1"
            DOTDOT ".."
          R_BRACK "]"
        SEMI ";"
      R_CURLY "}"

----------------------------------------
#![foo]
impl () {
  #![bar]
}

FILE
  INNER_ATTRIBUTE
    HASH "#"
    BANG "!"
    L_BRACK "["
    ATTR_VALUE
      IDENT "foo"
    R_BRACK "]"
  IMPL_DEF
    IMPL "impl"
    TYPE_REFERENCE
      UNIT_TYPE
        L_PAREN "("
        R_PAREN ")"
    MEMBERS
      L_CURLY "{"
      INNER_ATTRIBUTE
        HASH "#"
        BANG "!"
        L_BRACK "["
        ATTR_VALUE
          IDENT "bar"
        R_BRACK "]"
      R_CURLY "}"

----------------------------------------
#[foo, bar(baz), quux = 92] struct Foo;
#[cfg(target_os="linux")] mod bar;

FILE
  STRUCT_DEF
    ATTRIBUTE
      HASH "#"
      L_BRACK "["
      ATTR_VALUE
        IDENT "foo"
      COMMA ","
      ATTR_VALUE
        IDENT "bar"
        L_PAREN "("
        ATTR_VALUE
          IDENT "baz"
        R_PAREN ")"
      COMMA ","
      ATTR_VALUE
        IDENT "quux"
        EQ "="
        LITERAL
          NUMBER "92"
      R_BRACK "]"
    STRUCT "struct"
    IDENT "Foo"
    SEMI ";"
  MOD_DEF
    ATTRIBUTE
      HASH "#"
      L_BRACK "["
      ATTR_VALUE
        IDENT "cfg"
        L_PAREN "("
        ATTR_VALUE
          IDENT "target_os"
          EQ "="
          LITERAL
            STRING "\"linux\""
        R_PAREN ")"
      R_BRACK "]"
    MOD "mod"
    IDENT "bar"
    SEMI ";"

----------------------------------------
